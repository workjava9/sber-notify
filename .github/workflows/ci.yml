name: monorepo-ci

on:
  pull_request:
  push:
    branches: [ master ]

permissions:
  contents: read
  actions: read
  packages: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}

jobs:
  test:
    name: Gradle test
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            email: { paths: ["email-service/**"] }
            sms:   { paths: ["sms-service/**"] }
            push:  { paths: ["push-service/**"] }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Unit & integration tests (root)
        run: ./gradlew clean test --no-daemon -Dorg.gradle.parallel=true

      - name: Publish JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-reports
          path: '**/build/test-results/test/*.xml'

  qodana:
    needs: test
    uses: ./.github/workflows/qodana_code_quality.yml
    secrets: inherit

  build_matrix:
    name: Build & Push services
    needs: [ test]
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - svc: email
            dir: email-service
            image: ${{ env.REGISTRY }}/${{ env.REPO }}-email-service
          - svc: sms
            dir: sms-service
            image: ${{ env.REGISTRY }}/${{ env.REPO }}-sms-service
          - svc: push
            dir: push-service
            image: ${{ env.REGISTRY }}/${{ env.REPO }}-push-service

    uses: ./.github/workflows/build-service.yml
    with:
      service: ${{ matrix.svc }}
      dir:     ${{ matrix.dir }}
      image:   ${{ matrix.image }}
    secrets: inherit

  deploy:
    name: Deploy (docker compose on host)
    runs-on: ubuntu-latest
    needs: [build_matrix]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Copy compose
        run: scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/sber-notify/docker-compose.yml
      - name: Pull & Up
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            docker login ghcr.io -u '"$GITHUB_ACTOR"' -p '"$GITHUB_TOKEN"' &&
            cd /opt/sber-notify &&
            docker compose pull &&
            docker compose up -d &&
            docker system prune -f
          '
