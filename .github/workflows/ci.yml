name: monorepo-ci

on:
  pull_request:
  push:
    branches: [ master ]

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Gradle test
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - name: Detect changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            email:
              - 'email-service/**'
            sms:
              - 'sms-service/**'
            push:
              - 'push-service/**'
            api:
              - 'api-gateway/**'
            notification:
              - 'notification-storage/**'
            retry:
              - 'retry-service/**'

      - name: Setup JDK 17 (with Gradle cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Unit & integration tests
        run: ./gradlew clean test --no-daemon --stacktrace

      - name: Publish JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-reports
          path: |
            **/build/test-results/test/*.xml
            **/build/reports/tests/test

    outputs:
      email_changed: ${{ steps.filter.outputs.email }}
      sms_changed: ${{ steps.filter.outputs.sms }}
      push_changed: ${{ steps.filter.outputs.push }}
      api_changed: ${{ steps.filter.outputs.api }}
      notification_changed: ${{ steps.filter.outputs.notification }}
      retry_changed: ${{ steps.filter.outputs.retry }}

  build_and_push:
    name: Build & Push ${{ matrix.svc.name }}
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        svc:
          - { name: api-gateway,          dir: 'api-gateway',          image: 'ghcr.io/${{ github.repository }}-api-gateway' }
          - { name: email-service,        dir: 'email-service',        image: 'ghcr.io/${{ github.repository }}-email-service' }
          - { name: sms-service,          dir: 'sms-service',          image: 'ghcr.io/${{ github.repository }}-sms-service' }
          - { name: push-service,         dir: 'push-service',         image: 'ghcr.io/${{ github.repository }}-push-service' }
          - { name: notification-storage, dir: 'notification-storage', image: 'ghcr.io/${{ github.repository }}-notification-storage' }
          - { name: retry-service,        dir: 'retry-service',        image: 'ghcr.io/${{ github.repository }}-retry-service' }
    env:
      JAVA_OPTS: ""
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build JAR
        uses: gradle/actions/setup-gradle@v4

      - name: Gradle build (service)
        run: |
          ./gradlew :${{ matrix.svc.name }}:clean :${{ matrix.svc.name }}:build --no-daemon --stacktrace

      - name: Compute tags
        id: tags
        run: |
          IMG="${{ matrix.svc.image }}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tags=${IMG}:${GITHUB_REF_NAME},${IMG}:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            echo "tags=${IMG}:latest,${IMG}:sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Build & push (with cache)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.svc.dir }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    name: Deploy to host
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy compose file
        run: scp -o StrictHostKeyChecking=no Docker/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/sber-notify/docker-compose.yml

      - name: Pull & Up
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            docker login ghcr.io -u '"$GITHUB_ACTOR"' -p '"$GITHUB_TOKEN"' &&
            cd /opt/sber-notify &&
            docker compose pull &&
            docker compose up -d &&
            docker system prune -f
          '
